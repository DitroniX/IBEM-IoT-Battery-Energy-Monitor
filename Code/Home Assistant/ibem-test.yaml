esphome:
  name: ibem-test
  friendly_name: IBEM Test

substitutions:
  ShowRAWADVals: "False"

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret ibem_api_key

ota:
  - platform: esphome
    password: !secret ibem_ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Ibem-Test Fallback Hotspot"
    password: "8a39Alx5Dtgb"

captive_portal:

globals:
  - id: DCCALValue
    type: float
    restore_value: yes
    initial_value: '0'
  
font:
  - file: 'fonts/Arial.ttf'
    id: font14
    size: 14

i2c:
  sda: 4
  scl: 5
  scan: true
  id: bus_a

ads1115:
  - address: 0x48

button:
  - platform: template
    name: "Store Calibration Reading"
    on_press:
      then:
        - lambda: |-
            float VoltRaw2 = (id(a1_gnd).state + id(a2_gnd).state) - 3.3;
            float dcCAR = (VoltRaw2 / 0.013200);
            float dcCAR2 = roundf(dcCAR * 100000) / 100000;

            id(DCCALValue) = -dcCAR2;

            ESP_LOGD("main", "Value: %f Global Val: %f", dcCAR2, id(DCCALValue));
sensor:
  - platform: ads1115
    multiplexer: "A0_GND"
    id: a0_gnd
    gain: 4.096
    #filters:
    #  - lambda: return ((x * 30.9369) + 0.53);
    name: "A0"
    update_interval: 10s

  - platform: ads1115
    multiplexer: "A1_GND"
    id: a1_gnd
    gain: 4.096
    name: "A1"
    internal: ${ShowRAWADVals}
    update_interval: 10s

  - platform: ads1115
    multiplexer: "A2_GND"
    id: a2_gnd
    gain: 4.096
    name: "A2"
    internal: ${ShowRAWADVals}
    update_interval: 10s

  - platform: ads1115
    multiplexer: "A3_GND"
    gain: 4.096
    name: "A3"
    internal: ${ShowRAWADVals}
    update_interval: 10s

  - platform: template
    name: "Volts"
    id: calc_volts
    lambda: |-
      return ((id(a0_gnd).state * 30.9369) + 0.53);
    unit_of_measurement: A
    update_interval: 10s

  - platform: template
    name: "Amps"
    id: calc_amps
    lambda: |-
      float VoltRaw = (id(a1_gnd).state + id(a2_gnd).state);
      float VoltRaw2 = (id(a1_gnd).state + id(a2_gnd).state) - 3.3;
      float dcCAR = (VoltRaw2 / 0.013200) + id(DCCALValue);
      float DCPower = id(a0_gnd).state * dcCAR;
      ESP_LOGD("main", "VR1 %f, VR2 %f, DCCAR %f, DCP %f", VoltRaw, VoltRaw2, dcCAR, DCPower);
      if (dcCAR < 0.20) {
        return 0;
      } else {
        return (dcCAR);
      }
    unit_of_measurement: A
    update_interval: 10s

display:
  - platform: ssd1306_i2c
    id: i2cdisplay
    model: "SSD1306 128x32"
    #reset_pin: D0
    address: 0x3C
    lambda: |- 
      it.printf(0, 0, id(font14), TextAlign::TOP_LEFT, "%.2f A", id(calc_amps).state);
      it.printf(0, 15, id(font14), TextAlign::TOP_LEFT, "%.2f A", id(a0_gnd).state);
    